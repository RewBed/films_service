// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: src/proto/films.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import type { handleUnaryCall, Metadata, UntypedServiceImplementation } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Timestamp } from "../../google/protobuf/timestamp";

export const protobufPackage = "films";

/** Сообщение для создания нового фильма через gRPC */
export interface CreateFilmRequest {
  title: string;
  originalTitle: string;
  overview: string;
  releaseDate: Timestamp | undefined;
  originalLanguage: string;
  themoviedbId: number;
}

/** Сообщение для ответа (можно возвращать созданный фильм) */
export interface FilmResponse {
  id: number;
  title: string;
  originalTitle: string;
  overview: string;
  releaseDate: Timestamp | undefined;
  originalLanguage: string;
  themoviedbId: number;
  createdAt: Timestamp | undefined;
  updatedAt: Timestamp | undefined;
}

export const FILMS_PACKAGE_NAME = "films";

function createBaseCreateFilmRequest(): CreateFilmRequest {
  return { title: "", originalTitle: "", overview: "", releaseDate: undefined, originalLanguage: "", themoviedbId: 0 };
}

export const CreateFilmRequest: MessageFns<CreateFilmRequest> = {
  encode(message: CreateFilmRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.originalTitle !== "") {
      writer.uint32(18).string(message.originalTitle);
    }
    if (message.overview !== "") {
      writer.uint32(26).string(message.overview);
    }
    if (message.releaseDate !== undefined) {
      Timestamp.encode(message.releaseDate, writer.uint32(34).fork()).join();
    }
    if (message.originalLanguage !== "") {
      writer.uint32(42).string(message.originalLanguage);
    }
    if (message.themoviedbId !== 0) {
      writer.uint32(48).int32(message.themoviedbId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateFilmRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateFilmRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.originalTitle = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.overview = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.releaseDate = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.originalLanguage = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.themoviedbId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseFilmResponse(): FilmResponse {
  return {
    id: 0,
    title: "",
    originalTitle: "",
    overview: "",
    releaseDate: undefined,
    originalLanguage: "",
    themoviedbId: 0,
    createdAt: undefined,
    updatedAt: undefined,
  };
}

export const FilmResponse: MessageFns<FilmResponse> = {
  encode(message: FilmResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.originalTitle !== "") {
      writer.uint32(26).string(message.originalTitle);
    }
    if (message.overview !== "") {
      writer.uint32(34).string(message.overview);
    }
    if (message.releaseDate !== undefined) {
      Timestamp.encode(message.releaseDate, writer.uint32(42).fork()).join();
    }
    if (message.originalLanguage !== "") {
      writer.uint32(50).string(message.originalLanguage);
    }
    if (message.themoviedbId !== 0) {
      writer.uint32(56).int32(message.themoviedbId);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(message.createdAt, writer.uint32(66).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(message.updatedAt, writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FilmResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFilmResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.originalTitle = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.overview = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.releaseDate = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.originalLanguage = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.themoviedbId = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.createdAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.updatedAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

/** gRPC сервис фильмов */

export interface FilmsServiceClient {
  /** Метод создания нового фильма */

  createFilm(request: CreateFilmRequest, metadata?: Metadata): Observable<FilmResponse>;
}

/** gRPC сервис фильмов */

export interface FilmsServiceController {
  /** Метод создания нового фильма */

  createFilm(
    request: CreateFilmRequest,
    metadata?: Metadata,
  ): Promise<FilmResponse> | Observable<FilmResponse> | FilmResponse;
}

export function FilmsServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createFilm"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("FilmsService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("FilmsService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const FILMS_SERVICE_NAME = "FilmsService";

/** gRPC сервис фильмов */
export type FilmsServiceService = typeof FilmsServiceService;
export const FilmsServiceService = {
  /** Метод создания нового фильма */
  createFilm: {
    path: "/films.FilmsService/CreateFilm",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateFilmRequest): Buffer => Buffer.from(CreateFilmRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): CreateFilmRequest => CreateFilmRequest.decode(value),
    responseSerialize: (value: FilmResponse): Buffer => Buffer.from(FilmResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): FilmResponse => FilmResponse.decode(value),
  },
} as const;

export interface FilmsServiceServer extends UntypedServiceImplementation {
  /** Метод создания нового фильма */
  createFilm: handleUnaryCall<CreateFilmRequest, FilmResponse>;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
