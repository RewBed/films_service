// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Film

model Film {
  id               Int       @id @default(autoincrement())
  themoviedbId     Int       @unique
  imdbId           String?   
  title            String
  originalTitle    String
  overview         String
  originalLanguage String?
  releaseDate      DateTime?
  runtime          Int?
  budget           BigInt?
  revenue          BigInt?
  popularity       Float?
  voteAverage      Float?
  voteCount        Int?
  status           String?
  tagline          String?
  homepage         String?
  posterPath       String?
  backdropPath     String?
  adult            Boolean   @default(false)
  video            Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  genres              FilmGenre[]
  productionCompanies FilmProductionCompany[]
  productionCountries FilmProductionCountry[]
  spokenLanguages     FilmSpokenLanguage[]
  persons             FilmPerson[]
}

// Genre

model Genre {
  id          Int    @id @default(autoincrement())
  themoviedbId Int    @unique  
  name        String
  films       FilmGenre[]

  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model FilmGenre {
  filmId  Int
  genreId Int

  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  film   Film   @relation(fields: [filmId], references: [id])
  genre  Genre  @relation(fields: [genreId], references: [id])

  @@id([filmId, genreId])
}

// ProductionCompany

model ProductionCompany {
  id           Int    @id @default(autoincrement())
  themoviedbId Int    @unique  
  name         String
  originCountry String?
  logoPath     String?
  films        FilmProductionCompany[]
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model FilmProductionCompany {
  filmId    Int
  companyId Int

  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  film    Film              @relation(fields: [filmId], references: [id])
  company ProductionCompany @relation(fields: [companyId], references: [id])

  @@id([filmId, companyId])
}

// ProductionCountry

model ProductionCountry {
  id            Int       @id @default(autoincrement())
  isoCode       String    @unique  
  name          String
  films         FilmProductionCountry[]

  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model FilmProductionCountry {
  filmId    Int
  countryId Int

  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  film    Film              @relation(fields: [filmId], references: [id])
  country ProductionCountry @relation(fields: [countryId], references: [id])

  @@id([filmId, countryId])
}

// SpokenLanguage

model SpokenLanguage {
  id           Int    @id @default(autoincrement())
  isoCode      String @unique
  name         String
  englishName  String?
  films        FilmSpokenLanguage[]
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model FilmSpokenLanguage {
  filmId      Int
  languageId  Int

  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  film     Film           @relation(fields: [filmId], references: [id])
  language SpokenLanguage @relation(fields: [languageId], references: [id])

  @@id([filmId, languageId])
}

// Person

model Person {
  id                 Int       @id @default(autoincrement())
  themoviedbId       Int       @unique
  name               String
  biography          String?
  birthday           DateTime?
  deathday           DateTime?
  gender             Int?
  knownForDepartment String?
  placeOfBirth       String?
  profilePath        String?
  homepage           String?
  popularity         Float?
  imdbId             String?
  adult              Boolean   @default(false)
  alsoKnownAs        String[]  @default([])

  films              FilmPerson[]
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model FilmPerson {
  filmId   Int
  personId Int

  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  film     Film   @relation(fields: [filmId], references: [id])
  person   Person @relation(fields: [personId], references: [id])

  @@id([filmId, personId])
}
